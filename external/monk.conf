####################################################################
# Monk Custom External Rules:
####################################################################

# This will only allow passwords with AT LEAST one
# special character, one capital, one lower *AND* one number
# ./john -i:all -stdout -session:test --external:Filter_Complex | strings
[List.External:Filter_Complex]
void filter()
{
    int i, c ;
    int yesLOW;
    int yesCAP;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0 || yesSPECIAL==0) { word = 0; return;}
}

# This will only allow passwords with AT LEAST one
# special character, one capital, one lower *AND* one number,
# whose length is at least 6
# ./john -i:all -stdout -session:test --external:Filter_ComplexMin6 | strings
[List.External:Filter_ComplexMin6]
void filter()
{
    int i, c ;
    int count;
    int yesLOW;
    int yesCAP;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    count = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0 || yesSPECIAL==0 || count<6) { word = 0; return;}
}

# This will only allow passwords with AT LEAST one
# special character, one capital, one lower *AND* one number,
# whose length is at least 7
# ./john -i:all -stdout -session:test --external:Filter_ComplexMin7 | strings
[List.External:Filter_ComplexMin7]
void filter()
{
    int i, c ;
    int count;
    int yesLOW;
    int yesCAP;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    count = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0 || yesSPECIAL==0 || count<7) { word = 0; return;}
}

# This will only allow passwords with AT LEAST one
# special character, one capital, one lower *AND* one number,
# whose length is at least 6
# ./john -i:all -stdout -session:test --external:Filter_ComplexMin8 | strings
[List.External:Filter_ComplexMin8]
void filter()
{
    int i, c ;
    int count;
    int yesLOW;
    int yesCAP;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    count = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0 || yesSPECIAL==0 || count<8) { word = 0; return;}
}

# This will only allow passwords that meet the default complexity criteria of AD policy,
# which is: a minimum of 6 characters and using at least 3 of the 4 groups of characters,
# lowercase, uppercase, number, symbol.
# ./john -i:all -stdout -session:test --external:Filter_ADComplex | strings
[List.External:Filter_ADComplex]
void filter()
{
	int i, c;
	int count;
	int yesLOW;
	int yesCAP;
	int yesNUM;
	int yesSPECIAL;

	i = 0;
	count = 0;
	yesLOW = 0;
	yesCAP = 0;
	yesNUM = 0;
	yesSPECIAL = 0;

	while (c = word[i++])
	{
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }


    if (yesLOW + yesCAP + yesNUM + yesSPECIAL < 3 || count<6) { word = 0; return;}
}


# This will only allow passwords with AT LEAST one
# capital, one lower *AND* one number
# ./john -i:all -stdout -session:test --external:Filter_AtLeastOneCapLowNumber | strings
[List.External:Filter_AtLeastOneCapLowNumber]
void filter()
{
    int i, c ;
    int yesLOW;
    int yesCAP;
    int yesNUM;

    i = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;

    while (c = word[i++])
    {
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0) { word = 0; return;}
}

# This will only allow passwords with AT LEAST one
# capital, one lower *AND* one number,
# whose length is at least 6
# ./john -i:all -stdout -session:test --external:Filter_AtLeastOneCapLowNumberMin6 | strings
[List.External:Filter_AtLeastOneCapLowNumberMin6]
void filter()
{
    int i, c ;
    int count;
    int yesLOW;
    int yesCAP;
    int yesNUM;

    i = 0;
    count = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0 || count<6) { word = 0; return;}
}

# This will only allow passwords with AT LEAST one
# capital, one lower *AND* one number,
# whose length is at least 7
# ./john -i:all -stdout -session:test --external:Filter_AtLeastOneCapLowNumberMin7 | strings
[List.External:Filter_AtLeastOneCapLowNumberMin7]
void filter()
{
    int i, c ;
    int count;
    int yesLOW;
    int yesCAP;
    int yesNUM;

    i = 0;
    count = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0 || count<7) { word = 0; return;}
}

# This will only allow passwords with AT LEAST one
# capital, one lower *AND* one number,
# whose length is at least 8
# ./john -i:all -stdout -session:test --external:Filter_AtLeastOneCapLowNumberMin8 | strings
[List.External:Filter_AtLeastOneCapLowNumberMin8]
void filter()
{
    int i, c ;
    int count;
    int yesLOW;
    int yesCAP;
    int yesNUM;

    i = 0;
    count = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW = 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
    }

    if (yesLOW==0 || yesCAP==0 || yesNUM==0 || count<8) { word = 0; return;}
}

# This will only allow alphanumeric passwords
# ./john -i:all -stdout -session:test --external:Filter_AlphaNum | strings
[List.External:Filter_AlphaNum]
void filter()
{
    int i, c ;
    int yesALPHA;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    yesALPHA = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        if (c >= 'a' && c <= 'z') { yesALPHA = 1; }
        else if (c >= 'A' && c <= 'Z') { yesALPHA = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesALPHA==0 || yesNUM==0 || yesSPECIAL==1) { word = 0; return;}
}

# This will only allow alphanumeric passwords
# whose length is at least 6
# ./john -i:all -stdout -session:test --external:Filter_AlphaNumMin6 | strings
[List.External:Filter_AlphaNumMin6]
void filter()
{
    int i, c ;
    int count;
    int yesALPHA;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    count = 0;
    yesALPHA = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesALPHA = 1; }
        else if (c >= 'A' && c <= 'Z') { yesALPHA = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesALPHA==0 || yesNUM==0 || yesSPECIAL==1 || count<6) { word = 0; return;}
}

# This will only allow alphanumeric passwords
# whose length is at least 7
# ./john -i:all -stdout -session:test --external:Filter_AlphaNumMin7 | strings
[List.External:Filter_AlphaNumMin7]
void filter()
{
    int i, c ;
    int count;
    int yesALPHA;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    count = 0;
    yesALPHA = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesALPHA = 1; }
        else if (c >= 'A' && c <= 'Z') { yesALPHA = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesALPHA==0 || yesNUM==0 || yesSPECIAL==1 || count<7) { word = 0; return;}
}

# This will only allow alphanumeric passwords
# whose length is at least 8
# ./john -i:all -stdout -session:test --external:Filter_AlphaNumMin8 | strings
[List.External:Filter_AlphaNumMin8]
void filter()
{
    int i, c ;
    int count;
    int yesALPHA;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    count = 0;
    yesALPHA = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesALPHA = 1; }
        else if (c >= 'A' && c <= 'Z') { yesALPHA = 1; }
        else if (c >= '0' && c <= '9') { yesNUM = 1; }
        else { yesSPECIAL = 1; }
    }

    if (yesALPHA==0 || yesNUM==0 || yesSPECIAL==1 || count<8) { word = 0; return;}
}

# Only allow passwords with 6 characters or more
[List.External:Filter_Min6]
void filter()
{
    int i;
    int count;

    i = 0;
    count = 0;

    while (word[i++]) { count += 1; }

    if (count < 6) { word = 0; return; }
}

# Only allow passwords with 7 characters or more
[List.External:Filter_Min7]
void filter()
{
    int i;
    int count;

    i = 0;
    count = 0;

    while (word[i++]) { count += 1; }

    if (count < 7) { word = 0; return; }
}

# Only allow passwords with 8 characters or more
[List.External:Filter_Min8]
void filter()
{
    int i;
    int count;

    i = 0;
    count = 0;

    while (word[i++]) { count += 1; }

    if (count < 8) { word = 0; return; }
}

# This will only allow passwords one
# capital, one number *AND* six lower,
# whose length is equal to 8
# ./john -i:all -stdout -session:test --external:Filter_WeakComplex8 | strings
[List.External:Filter_WeakComplex8]
void filter()
{
    int i, c ;
    int count;
    int yesLOW;
    int yesCAP;
    int yesNUM;
    int yesSPECIAL;

    i = 0;
    count = 0;
    yesLOW = 0;
    yesCAP = 0;
    yesNUM = 0;
    yesSPECIAL = 0;

    while (c = word[i++])
    {
        count += 1;
        if (c >= 'a' && c <= 'z') { yesLOW += 1; }
        else if (c >= 'A' && c <= 'Z') { yesCAP += 1; }
        else if (c >= '0' && c <= '9') { yesNUM += 1; }
	else { yesSPECIAL += 1; }
    }

    if (yesLOW==0 || yesCAP!=1 || yesNUM!=1 || count!=8 || yesSPECIAL!=0) { word = 0; return;}
}
